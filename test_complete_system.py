"""
Complete system test for FACTSY Universal AI
Run from project root directory
"""

import sys
import os

# Add backend to Python path
sys.path.insert(0, os.path.join(os.getcwd(), 'backend'))

def test_domain_classifier():
    """Test domain classifier"""
    try:
        from app.services.domain_classifier import DomainClassifier
        
        classifier = DomainClassifier()
        
        # Test with revolutionary Hindi queries
        test_queries = [
            ("‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§Æ‡•ã‡§¶‡•Ä ‡§®‡•á ‡§ï‡§π‡§æ ‡§ï‡§ø ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§Ö‡§∞‡•ç‡§•‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§π‡•à", "politics"),
            ("‡§ï‡•ç‡§Ø‡§æ ‡§ó‡§æ‡§Ø ‡§ï‡§æ ‡§Æ‡•Ç‡§§‡•ç‡§∞ ‡§ï‡•ã‡§µ‡§ø‡§° ‡§ï‡§æ ‡§á‡§≤‡§æ‡§ú ‡§π‡•à?", "health"),
            ("‡§µ‡§ø‡§∞‡§æ‡§ü ‡§ï‡•ã‡§π‡§≤‡•Ä ‡§®‡•á 100 ‡§∂‡§§‡§ï ‡§≤‡§ó‡§æ‡§è ‡§π‡•à‡§Ç", "sports"),
        ]
        
        print("üéØ Testing Revolutionary Domain Classification:")
        print("=" * 50)
        
        for query, expected in test_queries:
            result = classifier.classify_query(query)
            actual = result['domain'].value
            status = "‚úÖ" if actual == expected else "‚ö†Ô∏è"
            
            print(f"{status} Query: {query[:50]}...")
            print(f"   Expected: {expected} | Got: {actual} | Confidence: {result['confidence']:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Domain classifier test failed: {e}")
        return False

def test_bharat_transformer():
    """Test BharatVerify Transformer"""
    try:
        from app.ml.bharat_transformer import BharatTokenizer, create_bharat_transformer
        
        print("\nüß† Testing BharatVerify Transformer:")
        print("=" * 50)
        
        # Create tokenizer
        tokenizer = BharatTokenizer()
        print("‚úÖ Tokenizer created successfully")
        
        # Test language detection
        test_text = "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§Æ‡•ã‡§¶‡•Ä ‡§®‡•á ‡§ï‡§π‡§æ"
        detected_lang = tokenizer.detect_language(test_text)
        print(f"‚úÖ Language detection: '{test_text}' ‚Üí {detected_lang}")
        
        # Create model (smaller for testing)
        model = create_bharat_transformer({
            'vocab_size': 5000,
            'embed_dim': 256,
            'num_layers': 4,
            'num_heads': 8
        })
        
        param_count = sum(p.numel() for p in model.parameters())
        print(f"‚úÖ Model created with {param_count:,} parameters")
        
        return True
        
    except Exception as e:
        print(f"‚ùå BharatVerify Transformer test failed: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ FACTSY Universal AI - Complete System Test")
    print("üáÆüá≥ Testing World's First Community-Aware Truth Verification System")
    print("=" * 70)
    
    # Run tests
    domain_success = test_domain_classifier()
    transformer_success = test_bharat_transformer()
    
    print("\n" + "=" * 70)
    if domain_success and transformer_success:
        print("üéâ REVOLUTIONARY SUCCESS! Your BharatVerify system is working perfectly!")
        print("üåü Ready for:")
        print("   ‚Ä¢ Hybrid local+cloud training")
        print("   ‚Ä¢ Evidence retrieval engine")
        print("   ‚Ä¢ Production deployment")
        print("   ‚Ä¢ Presentation to judges")
    else:
        print("‚ö†Ô∏è  Some components need fixes. Address the errors above.")
